// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	database "github.com/MYOB-Technology/ops-kube-db-operator/pkg/database"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBCreator is a mock of DBCreator interface
type MockDBCreator struct {
	ctrl     *gomock.Controller
	recorder *MockDBCreatorMockRecorder
}

// MockDBCreatorMockRecorder is the mock recorder for MockDBCreator
type MockDBCreatorMockRecorder struct {
	mock *MockDBCreator
}

// NewMockDBCreator creates a new mock instance
func NewMockDBCreator(ctrl *gomock.Controller) *MockDBCreator {
	mock := &MockDBCreator{ctrl: ctrl}
	mock.recorder = &MockDBCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBCreator) EXPECT() *MockDBCreatorMockRecorder {
	return m.recorder
}

// CreateDB mocks base method
func (m *MockDBCreator) CreateDB(req *database.Request, adminCred *database.Credential) (*database.Database, error) {
	ret := m.ctrl.Call(m, "CreateDB", req, adminCred)
	ret0, _ := ret[0].(*database.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDB indicates an expected call of CreateDB
func (mr *MockDBCreatorMockRecorder) CreateDB(req, adminCred interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDB", reflect.TypeOf((*MockDBCreator)(nil).CreateDB), req, adminCred)
}

// MockDBGetter is a mock of DBGetter interface
type MockDBGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDBGetterMockRecorder
}

// MockDBGetterMockRecorder is the mock recorder for MockDBGetter
type MockDBGetterMockRecorder struct {
	mock *MockDBGetter
}

// NewMockDBGetter creates a new mock instance
func NewMockDBGetter(ctrl *gomock.Controller) *MockDBGetter {
	mock := &MockDBGetter{ctrl: ctrl}
	mock.recorder = &MockDBGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBGetter) EXPECT() *MockDBGetterMockRecorder {
	return m.recorder
}

// GetDB mocks base method
func (m *MockDBGetter) GetDB(arg0 database.DatabaseID) (*database.Database, error) {
	ret := m.ctrl.Call(m, "GetDB", arg0)
	ret0, _ := ret[0].(*database.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB
func (mr *MockDBGetterMockRecorder) GetDB(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDBGetter)(nil).GetDB), arg0)
}

// MockCredsGetter is a mock of CredsGetter interface
type MockCredsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCredsGetterMockRecorder
}

// MockCredsGetterMockRecorder is the mock recorder for MockCredsGetter
type MockCredsGetterMockRecorder struct {
	mock *MockCredsGetter
}

// NewMockCredsGetter creates a new mock instance
func NewMockCredsGetter(ctrl *gomock.Controller) *MockCredsGetter {
	mock := &MockCredsGetter{ctrl: ctrl}
	mock.recorder = &MockCredsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredsGetter) EXPECT() *MockCredsGetterMockRecorder {
	return m.recorder
}

// GetCred mocks base method
func (m *MockCredsGetter) GetCred(credScope database.Scope, id database.CredentialID) (*database.Credential, error) {
	ret := m.ctrl.Call(m, "GetCred", credScope, id)
	ret0, _ := ret[0].(*database.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCred indicates an expected call of GetCred
func (mr *MockCredsGetterMockRecorder) GetCred(credScope, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCred", reflect.TypeOf((*MockCredsGetter)(nil).GetCred), credScope, id)
}

// MockCredsUpdater is a mock of CredsUpdater interface
type MockCredsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCredsUpdaterMockRecorder
}

// MockCredsUpdaterMockRecorder is the mock recorder for MockCredsUpdater
type MockCredsUpdaterMockRecorder struct {
	mock *MockCredsUpdater
}

// NewMockCredsUpdater creates a new mock instance
func NewMockCredsUpdater(ctrl *gomock.Controller) *MockCredsUpdater {
	mock := &MockCredsUpdater{ctrl: ctrl}
	mock.recorder = &MockCredsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredsUpdater) EXPECT() *MockCredsUpdaterMockRecorder {
	return m.recorder
}

// UpdateCred mocks base method
func (m *MockCredsUpdater) UpdateCred(credential *database.Credential) error {
	ret := m.ctrl.Call(m, "UpdateCred", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCred indicates an expected call of UpdateCred
func (mr *MockCredsUpdaterMockRecorder) UpdateCred(credential interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCred", reflect.TypeOf((*MockCredsUpdater)(nil).UpdateCred), credential)
}

// MockCredsCreator is a mock of CredsCreator interface
type MockCredsCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCredsCreatorMockRecorder
}

// MockCredsCreatorMockRecorder is the mock recorder for MockCredsCreator
type MockCredsCreatorMockRecorder struct {
	mock *MockCredsCreator
}

// NewMockCredsCreator creates a new mock instance
func NewMockCredsCreator(ctrl *gomock.Controller) *MockCredsCreator {
	mock := &MockCredsCreator{ctrl: ctrl}
	mock.recorder = &MockCredsCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredsCreator) EXPECT() *MockCredsCreatorMockRecorder {
	return m.recorder
}

// CreateCred mocks base method
func (m *MockCredsCreator) CreateCred(credential *database.Credential) error {
	ret := m.ctrl.Call(m, "CreateCred", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCred indicates an expected call of CreateCred
func (mr *MockCredsCreatorMockRecorder) CreateCred(credential interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCred", reflect.TypeOf((*MockCredsCreator)(nil).CreateCred), credential)
}

// MockMetricsExporterCreator is a mock of MetricsExporterCreator interface
type MockMetricsExporterCreator struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsExporterCreatorMockRecorder
}

// MockMetricsExporterCreatorMockRecorder is the mock recorder for MockMetricsExporterCreator
type MockMetricsExporterCreatorMockRecorder struct {
	mock *MockMetricsExporterCreator
}

// NewMockMetricsExporterCreator creates a new mock instance
func NewMockMetricsExporterCreator(ctrl *gomock.Controller) *MockMetricsExporterCreator {
	mock := &MockMetricsExporterCreator{ctrl: ctrl}
	mock.recorder = &MockMetricsExporterCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsExporterCreator) EXPECT() *MockMetricsExporterCreatorMockRecorder {
	return m.recorder
}

// CreateMetricsExporter mocks base method
func (m *MockMetricsExporterCreator) CreateMetricsExporter(s database.Scope, name string, id database.CredentialID) error {
	ret := m.ctrl.Call(m, "CreateMetricsExporter", s, name, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetricsExporter indicates an expected call of CreateMetricsExporter
func (mr *MockMetricsExporterCreatorMockRecorder) CreateMetricsExporter(s, name, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricsExporter", reflect.TypeOf((*MockMetricsExporterCreator)(nil).CreateMetricsExporter), s, name, id)
}

// MockStatusUpdater is a mock of StatusUpdater interface
type MockStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUpdaterMockRecorder
}

// MockStatusUpdaterMockRecorder is the mock recorder for MockStatusUpdater
type MockStatusUpdaterMockRecorder struct {
	mock *MockStatusUpdater
}

// NewMockStatusUpdater creates a new mock instance
func NewMockStatusUpdater(ctrl *gomock.Controller) *MockStatusUpdater {
	mock := &MockStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatusUpdater) EXPECT() *MockStatusUpdaterMockRecorder {
	return m.recorder
}

// StatusUpdate mocks base method
func (m *MockStatusUpdater) StatusUpdate(sReq *database.StatusRequest) error {
	ret := m.ctrl.Call(m, "StatusUpdate", sReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusUpdate indicates an expected call of StatusUpdate
func (mr *MockStatusUpdaterMockRecorder) StatusUpdate(sReq interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockStatusUpdater)(nil).StatusUpdate), sReq)
}

// MockCredentialsStorer is a mock of CredentialsStorer interface
type MockCredentialsStorer struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsStorerMockRecorder
}

// MockCredentialsStorerMockRecorder is the mock recorder for MockCredentialsStorer
type MockCredentialsStorerMockRecorder struct {
	mock *MockCredentialsStorer
}

// NewMockCredentialsStorer creates a new mock instance
func NewMockCredentialsStorer(ctrl *gomock.Controller) *MockCredentialsStorer {
	mock := &MockCredentialsStorer{ctrl: ctrl}
	mock.recorder = &MockCredentialsStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredentialsStorer) EXPECT() *MockCredentialsStorerMockRecorder {
	return m.recorder
}

// CreateCred mocks base method
func (m *MockCredentialsStorer) CreateCred(credential *database.Credential) error {
	ret := m.ctrl.Call(m, "CreateCred", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCred indicates an expected call of CreateCred
func (mr *MockCredentialsStorerMockRecorder) CreateCred(credential interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCred", reflect.TypeOf((*MockCredentialsStorer)(nil).CreateCred), credential)
}

// GetCred mocks base method
func (m *MockCredentialsStorer) GetCred(credScope database.Scope, id database.CredentialID) (*database.Credential, error) {
	ret := m.ctrl.Call(m, "GetCred", credScope, id)
	ret0, _ := ret[0].(*database.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCred indicates an expected call of GetCred
func (mr *MockCredentialsStorerMockRecorder) GetCred(credScope, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCred", reflect.TypeOf((*MockCredentialsStorer)(nil).GetCred), credScope, id)
}

// UpdateCred mocks base method
func (m *MockCredentialsStorer) UpdateCred(credential *database.Credential) error {
	ret := m.ctrl.Call(m, "UpdateCred", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCred indicates an expected call of UpdateCred
func (mr *MockCredentialsStorerMockRecorder) UpdateCred(credential interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCred", reflect.TypeOf((*MockCredentialsStorer)(nil).UpdateCred), credential)
}

// MockDBCreateGetter is a mock of DBCreateGetter interface
type MockDBCreateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDBCreateGetterMockRecorder
}

// MockDBCreateGetterMockRecorder is the mock recorder for MockDBCreateGetter
type MockDBCreateGetterMockRecorder struct {
	mock *MockDBCreateGetter
}

// NewMockDBCreateGetter creates a new mock instance
func NewMockDBCreateGetter(ctrl *gomock.Controller) *MockDBCreateGetter {
	mock := &MockDBCreateGetter{ctrl: ctrl}
	mock.recorder = &MockDBCreateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBCreateGetter) EXPECT() *MockDBCreateGetterMockRecorder {
	return m.recorder
}

// CreateDB mocks base method
func (m *MockDBCreateGetter) CreateDB(req *database.Request, adminCred *database.Credential) (*database.Database, error) {
	ret := m.ctrl.Call(m, "CreateDB", req, adminCred)
	ret0, _ := ret[0].(*database.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDB indicates an expected call of CreateDB
func (mr *MockDBCreateGetterMockRecorder) CreateDB(req, adminCred interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDB", reflect.TypeOf((*MockDBCreateGetter)(nil).CreateDB), req, adminCred)
}

// GetDB mocks base method
func (m *MockDBCreateGetter) GetDB(arg0 database.DatabaseID) (*database.Database, error) {
	ret := m.ctrl.Call(m, "GetDB", arg0)
	ret0, _ := ret[0].(*database.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB
func (mr *MockDBCreateGetterMockRecorder) GetDB(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDBCreateGetter)(nil).GetDB), arg0)
}

// MockCreateDatabase is a mock of CreateDatabase interface
type MockCreateDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateDatabaseMockRecorder
}

// MockCreateDatabaseMockRecorder is the mock recorder for MockCreateDatabase
type MockCreateDatabaseMockRecorder struct {
	mock *MockCreateDatabase
}

// NewMockCreateDatabase creates a new mock instance
func NewMockCreateDatabase(ctrl *gomock.Controller) *MockCreateDatabase {
	mock := &MockCreateDatabase{ctrl: ctrl}
	mock.recorder = &MockCreateDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateDatabase) EXPECT() *MockCreateDatabaseMockRecorder {
	return m.recorder
}

// CreateCred mocks base method
func (m *MockCreateDatabase) CreateCred(credential *database.Credential) error {
	ret := m.ctrl.Call(m, "CreateCred", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCred indicates an expected call of CreateCred
func (mr *MockCreateDatabaseMockRecorder) CreateCred(credential interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCred", reflect.TypeOf((*MockCreateDatabase)(nil).CreateCred), credential)
}

// GetCred mocks base method
func (m *MockCreateDatabase) GetCred(credScope database.Scope, id database.CredentialID) (*database.Credential, error) {
	ret := m.ctrl.Call(m, "GetCred", credScope, id)
	ret0, _ := ret[0].(*database.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCred indicates an expected call of GetCred
func (mr *MockCreateDatabaseMockRecorder) GetCred(credScope, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCred", reflect.TypeOf((*MockCreateDatabase)(nil).GetCred), credScope, id)
}

// UpdateCred mocks base method
func (m *MockCreateDatabase) UpdateCred(credential *database.Credential) error {
	ret := m.ctrl.Call(m, "UpdateCred", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCred indicates an expected call of UpdateCred
func (mr *MockCreateDatabaseMockRecorder) UpdateCred(credential interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCred", reflect.TypeOf((*MockCreateDatabase)(nil).UpdateCred), credential)
}

// CreateDB mocks base method
func (m *MockCreateDatabase) CreateDB(req *database.Request, adminCred *database.Credential) (*database.Database, error) {
	ret := m.ctrl.Call(m, "CreateDB", req, adminCred)
	ret0, _ := ret[0].(*database.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDB indicates an expected call of CreateDB
func (mr *MockCreateDatabaseMockRecorder) CreateDB(req, adminCred interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDB", reflect.TypeOf((*MockCreateDatabase)(nil).CreateDB), req, adminCred)
}

// GetDB mocks base method
func (m *MockCreateDatabase) GetDB(arg0 database.DatabaseID) (*database.Database, error) {
	ret := m.ctrl.Call(m, "GetDB", arg0)
	ret0, _ := ret[0].(*database.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB
func (mr *MockCreateDatabaseMockRecorder) GetDB(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockCreateDatabase)(nil).GetDB), arg0)
}
