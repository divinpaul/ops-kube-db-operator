/*

Copyright 2017 MYOB Technology Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/MYOB-Technology/ops-kube-db-operator/pkg/apis/postgresdb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PostgresDBLister helps list PostgresDBs.
type PostgresDBLister interface {
	// List lists all PostgresDBs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresDB, err error)
	// PostgresDBs returns an object that can list and get PostgresDBs.
	PostgresDBs(namespace string) PostgresDBNamespaceLister
	PostgresDBListerExpansion
}

// postgresDBLister implements the PostgresDBLister interface.
type postgresDBLister struct {
	indexer cache.Indexer
}

// NewPostgresDBLister returns a new PostgresDBLister.
func NewPostgresDBLister(indexer cache.Indexer) PostgresDBLister {
	return &postgresDBLister{indexer: indexer}
}

// List lists all PostgresDBs in the indexer.
func (s *postgresDBLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresDB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresDB))
	})
	return ret, err
}

// PostgresDBs returns an object that can list and get PostgresDBs.
func (s *postgresDBLister) PostgresDBs(namespace string) PostgresDBNamespaceLister {
	return postgresDBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PostgresDBNamespaceLister helps list and get PostgresDBs.
type PostgresDBNamespaceLister interface {
	// List lists all PostgresDBs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresDB, err error)
	// Get retrieves the PostgresDB from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PostgresDB, error)
	PostgresDBNamespaceListerExpansion
}

// postgresDBNamespaceLister implements the PostgresDBNamespaceLister
// interface.
type postgresDBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PostgresDBs in the indexer for a given namespace.
func (s postgresDBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresDB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresDB))
	})
	return ret, err
}

// Get retrieves the PostgresDB from the indexer for a given namespace and name.
func (s postgresDBNamespaceLister) Get(name string) (*v1alpha1.PostgresDB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("postgresdb"), name)
	}
	return obj.(*v1alpha1.PostgresDB), nil
}
