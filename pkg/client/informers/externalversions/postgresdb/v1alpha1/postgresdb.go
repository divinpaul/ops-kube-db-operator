/*

Copyright 2017 MYOB Technology Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	postgresdb_v1alpha1 "github.com/MYOB-Technology/ops-kube-db-operator/pkg/apis/postgresdb/v1alpha1"
	versioned "github.com/MYOB-Technology/ops-kube-db-operator/pkg/client/clientset/versioned"
	internalinterfaces "github.com/MYOB-Technology/ops-kube-db-operator/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/MYOB-Technology/ops-kube-db-operator/pkg/client/listers/postgresdb/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// PostgresDBInformer provides access to a shared informer and lister for
// PostgresDBs.
type PostgresDBInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.PostgresDBLister
}

type postgresDBInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewPostgresDBInformer constructs a new informer for PostgresDB type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPostgresDBInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.PostgresdbV1alpha1().PostgresDBs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.PostgresdbV1alpha1().PostgresDBs(namespace).Watch(options)
			},
		},
		&postgresdb_v1alpha1.PostgresDB{},
		resyncPeriod,
		indexers,
	)
}

func defaultPostgresDBInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewPostgresDBInformer(client, v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *postgresDBInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&postgresdb_v1alpha1.PostgresDB{}, defaultPostgresDBInformer)
}

func (f *postgresDBInformer) Lister() v1alpha1.PostgresDBLister {
	return v1alpha1.NewPostgresDBLister(f.Informer().GetIndexer())
}
