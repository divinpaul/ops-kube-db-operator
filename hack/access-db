#!/usr/bin/env bash
### access-db
###
# TODO: update `--db` flag to represent the actual db name once that is changed in the code
###

set -e

NAMESPACE=$1
NAME=$2

if [ -z "${NAMESPACE}" -o -z "${NAME}" ]
then
  echo
  echo please provide namespace and postgresdb name on the command line
  echo ie. ./access-db namespace example-db
  echo
  exit 1
fi

if [ -z $(which jq) ]
then
  echo
  echo "missing jq - please install it and rerun"
  echo "ie. brew install jq"
  echo
  exit 1
fi

DB_SECRET_NAME="$NAME-admin"
DB_AUTH=`kubectl get -n $NAMESPACE secrets $DB_SECRET_NAME -o json`
DB_USER=`echo $DB_AUTH | jq -r '.data.DB_USER'|base64 --decode`
DB_PASSWORD=`echo $DB_AUTH | jq -r '.data.DB_PASSWORD'|base64 --decode`
DB_HOST=`echo $DB_AUTH | jq -r '.data.DB_HOST'|base64 --decode`
POD_NAME="pgweb-${USER//[.]/-}"

function cleanup {
  kubectl -n $NAMESPACE delete pod $POD_NAME
}
trap cleanup EXIT

PGWEB_VERSION=0.9.10
kubectl run -n $NAMESPACE $POD_NAME \
    --generator run-pod/v1 \
    --pod-running-timeout=1h \
    --image=sosedoff/pgweb:$PGWEB_VERSION -- \
    pgweb --host $DB_HOST \
        --user "$DB_USER" \
        --db postgres \
        --pass \"$DB_PASSWORD\"

# WAIT FOR POD TO BE READY
while true
do
    sleep 1
    STATUS=`kubectl -n $NAMESPACE get pod $POD_NAME -o template --template={{.status.phase}}`
    echo "Waiting for pod to be ready: $STATUS ..."
    if [[ $STATUS == *"Running"* ]]; then
        break
    fi
done

echo "Access on http://localhost:8081"
kubectl -n $NAMESPACE port-forward $POD_NAME 8081

