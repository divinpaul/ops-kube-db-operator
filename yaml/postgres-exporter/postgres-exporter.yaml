{{- $Values := (datasource "config") -}}
{{- $Queries := (datasource "queries") -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $Values.db.name }}-postgres-exporter
  labels:
    app: postgres-exporter
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator
type: Opaque
data:
  DB_PASSWORD:  {{ $Values.db.password | base64.Encode  }}
  DATABASE_URL: {{ $Values.db.url | base64.Encode  }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $Values.db.name }}-postgres-exporter
  labels:
    app: postgres-exporter
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator
data:
  queries.yaml: |
{{ $Queries | toYAML | indent 4 }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $Values.db.name }}-postgres-exporter
  labels:
    app: postgres-exporter
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator
  annotations:
    prometheus.io/scrape: "true"
spec:
  ports:
    - port: {{ $Values.metrics.port }}
      targetPort: {{ $Values.metrics.port }}
  selector:
    app: postgres-exporter
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ $Values.db.name }}-postgres-exporter
  labels:
    app: postgres-exporter
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator
spec:
  replicas: {{ $Values.metrics.minInstances }}
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%
  template:
    metadata:
      labels:
        app: postgres-exporter
        dbName: {{ $Values.db.name }}
        repo: ops-kube-db-operator
        version: {{ $Values.metrics.imageTag }}
    spec:
      containers:
      - name: metrics
        image: "{{ $Values.metrics.image }}:{{ $Values.metrics.imageTag }}"
        imagePullPolicy: Always
        args: ["--extend.query-path=/etc/config/queries.yaml"]
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: {{ $Values.db.name }}-postgres-exporter
              key: DATABASE_URL
        ports:
        - name: metrics
          containerPort: {{ $Values.metrics.port }}
        livenessProbe:
          httpGet:
            path: /
            port: {{ $Values.metrics.port }}
          initialDelaySeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: {{ $Values.metrics.port }}
          initialDelaySeconds: 60
          timeoutSeconds: 3
        resources:
{{ $Values.resources | toYAML | indent 10 }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
      - name: debug
        image: gcr.io/google_containers/busybox
        imagePullPolicy: Always
        args: ["tail", "-f", "/dev/null"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ $Values.db.name }}-postgres-exporter
              key: DATABASE_URL
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
      volumes:
      - name: config-volume
        configMap:
          name: {{ $Values.db.name }}-postgres-exporter

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $Values.db.name }}
  labels:
    app: postgres
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator
spec:
  ports:
    - port: {{ $Values.db.port }}
      targetPort: {{ $Values.db.port }}
  selector:
    app: postgres
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ $Values.db.name }}
  labels:
    app: postgres
    dbName: {{ $Values.db.name }}
    repo: ops-kube-db-operator
spec:
  replicas: {{ $Values.metrics.minInstances }}
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%
  template:
    metadata:
      labels:
        app: postgres
        dbName: {{ $Values.db.name }}
        repo: ops-kube-db-operator
        version: {{ $Values.postgres.imageTag }}
    spec:
      containers:
      - name: postgres
        image: "{{ $Values.postgres.image }}:{{ $Values.postgres.imageTag }}"
        imagePullPolicy: Always
        env:
        - name: POSTGRES_USER
          value: {{ $Values.db.user  }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ $Values.db.user  }}
        - name: POSTGRES_DB
          value: {{ $Values.db.name  }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $Values.db.name }}-postgres-exporter
              key: DB_PASSWORD
        ports:
        - name: postgresql
          containerPort: {{ $Values.db.port }}
        livenessProbe:
          exec:
            command:
            - pg_isready
          initialDelaySeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
          initialDelaySeconds: 60
          timeoutSeconds: 3
        resources:
{{ $Values.resources | toYAML | indent 10 }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
      volumes:
      - name: data
        emptyDir: {}
